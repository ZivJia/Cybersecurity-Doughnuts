{
  "frontend": {
     "id": "frontend",
    "name": "Frontend Development Checklist",
    "finishedColor": "#33ffbb",
    "unfinishedColor": "#2cc995",
    "cardColor": "#d9ffe3",
    "checklist": [
      {
        "name": "Never hardcode secrets/tokens/sensitive information in the Code!",
        "description": "Of course we know better",
        "value": false
      },
      {
        "name": "Check user input to prevent XSS",
        "description": "Check if the user inputted text is has an ill will",
        "value": false
      },
      {
        "name": "Render user input after HTML encoding",
        "description": "Before putting any user provided text into the DOM, should perform HTML ending, so no script will be executed by the browser",
        "value": false
      },
      {
        "name": "Set up content security Policy",
        "description": "Use Content Security Policy (CSP) to reduce the severity of XSS attacks",
        "value": false
      },
      {
        "name": "Use existing library/service to verify CSRF token",
        "value": false
      },
      {
        "name": "Store the CSRF token with user session on server side",
        "description": "The server-side application should verify that the request includes a token which matches the value that was stored in the user's session",
        "value": false
      },
      {
        "name": "Use SameSite cookie restriction to prevent CSRF",
        "description": "Set SameSite restrictions on each cookie you issue",
        "value": false
      },
      {
        "name": "Avoid Third-Party cookies",
        "description": "Third-Party cookies are known for the vulnerability and will be shutdown by major browser providers",
        "value": false
      },
      {
        "name": "Authenticate the user before return the web artifacts",
        "description": "Web artifacts sometimes contains information that hackers can guess the meaning out of.",
        "value": false
      },
      {
        "name": "Set timeouts for browser sessions",
        "value": false
      },
      {
        "name": "Never send sensitive identifier & secrets in URL parameters",
        "description": "Url parameter is not encoded, but the request body is",
        "value": false
      }
    ]
  },
  "backend": {
    "id": "backend",
    "name": "Backend cybersecurity checklist",
    "finishedColor": "#73ffff",
    "unfinishedColor": "#60d1d1",
    "checklist": [
      {
        "name": "Never hardcode sensitive information",
        "description": "Again, don't do that",
        "value": false
      },
      {
        "name": "Authenticate the user with every request",
        "value": false
      },
      {
        "name": "User industrial standard and existing service for authentication",
        "description": "For example, OKTA",
        "value": false
      },
      {
        "name": "API key access should have roles that ties to authorization",
        "description": "For example, OKTA",
        "value": false
      },
      {
        "name": "API should have authorization built up against the requester's role",
        "description": "Always attach roles into requester, this will help development too!",
        "value": false
      },
      {
        "name": "API keys should be rotated with fixed amount of time",
        "description": "Will lower the impact in case of a token breach",
        "value": false
      },
      {
        "name": "Validation user input to prevent SQL injections",
        "description": "Be really care when taking in user input as SQL parameters, always validate them",
        "value": false
      },
      {
        "name": "Use HTTPs if possible",
        "description": "Requests are encrypted in HTTPs!",
        "value": false
      },
      {
        "name": "Use most up to date credential generating algorithms",
        "description": "Older generation algorithms are easier to be beaked by hackers.",
        "value": false
      },
      {
        "name": "Never store credentials in plain text",
        "description": "Imaging if you DB is leaked. Don't store plain text!",
        "value": false
      },
      {
        "name": "Use technologies like PGP encryption for files",
        "description": "When store files, encrypt them before storing",
        "value": false
      },
      {
        "name": "Scan random uploaded files",
        "description": "If you allow user to upload files, please scan it for its intention",
        "value": false
      },
      {
        "name": "Implement a good loggers",
        "description": "Logger with important information helps to identify potential hacking activities quickly",
        "value": false
      },
      {
        "name": "Produce logs for every access temptation",
        "description": "Log temptation for both human users as well as Service Accounts",
        "value": false
      },
      {
        "name": "Hooks logs into SIEM systems",
        "description": "SIEM systems will help to identify risks from your logs and notify you",
        "value": false
      }
    ]
  },
   "infra": {
    "id": "infra",
    "name": "Infrastructure Set Up",
    "finishedColor": "#fffb82",
    "unfinishedColor": "#dbd760",
    "checklist": [
      {
        "name": "Give minimal access rights for co-workers on infra account",
        "description": "Less access, more security",
        "value": true
      },
      {
        "name": "Have Infrastructure as Code (IaC) setup to reduce human mistakes",
        "description": "For example terraform",
        "value": true
      },
      {
        "name": "Backup database",
        "description": "If a hack made you lost your DB, you at least can restore it from snapshot",
        "value": true
      },
      {
        "name": "Enable all logging for the infrastructure service you use",
        "description": "For example, enable logging for all services on AWS",
        "value": true
      },
      {
        "name": "Make a RunBook for disaster recovery and risk mitigation",
        "description": "Come prepared, so we can recover it quicker",
        "value": true
      },
      {
        "name": "Have the Web Application Firewalls (WAF) set up",
        "description": "Follow standards on how to set up Firewall correctly",
        "value": true
      },
      {
        "name": "Enable all logging for the infrastructure service you use",
        "description": "For example, enable logging for all services on AWS",
        "value": true
      },
      {
        "name": "If internal tool, only allow IP from certain ranges",
        "description": "For example, the company's VPN IP mask",
        "value": true
      },
      {
        "name": "Disable insecure protocols like telnet and SNMP",
        "value": true
      }
    ]
  },
  "pipeline": {
    "id": "pipeline",
    "name": "Deployment pipeline recommendations",
    "finishedColor": "#f59393",
    "unfinishedColor": "#d67676",
    "checklist": [
      {
        "name": "Make sure only necessary people has access to CI/CD credentials",
        "description": "These credentials usually can do serious damage because they usually has access to your infra.",
        "value": false
      },
      {
        "name": "Set up vulnerability scanner, so you get notified if any of your dependencies are vulnerable.",
        "description": "A lot of server breaches are because of dependency breaches, fix the vulnerability by upgrading or find replacement",
        "value": false
      },
      {
        "name": "Gitleak scanner integration",
        "description": "It will tell you if you have checked in a secret in your code, very convenient. e.g. https://github.com/gabrielsoltz/ess-gitlab",
        "value": false
      },
      {
        "name": "Checkov integrations",
        "description": "Scans for infrastructure setup misconfigurations.",
        "value": false
      },
      {
        "name": "Customize your definition of cyber not secure code",
        "description": "Semgrep is a good source, DefectDojo is another one",
        "value": false
      }
    ]
  }
}